from @core import Mapping, Slice, List, Set, Map

from webidl`jasmine` import describe, expect, it, fail

function expectToBe(value any, otherValue any) {
	expect(&value).toBe(&otherValue)
}

function TEST() {
	// Mapping
	describe('Mapping', function() {
		describe('.Empty()', function() {
			it('should create an empty mapping', function(done function<void>()) {
				expectToBe(Mapping<string>.Empty().IsEmpty, true)
				done()
			})
		})

		describe('.IsEmpty', function() {
			it('should return empty for an empty mapping', function(done function<void>()) {
				expectToBe(Mapping<string>.Empty().IsEmpty, true)
				done()
			})

			it('should return non-empty for a non-empty mapping', function(done function<void>()) {
				expectToBe(({'foo': 'bar'}).IsEmpty, false)
				done()
			})
		})

		describe('operator Index', function() {
			it('should return the value for a key', function(done function<void>()) {
				expectToBe(({'foo': 42})['foo'], 42)
				done()
			})

			it('should return null for an unknown key', function(done function<void>()) {
				expectToBe(({'foo': 42})['unknown'], null)
				done()
			})
		})

		expectKeys := function(value mapping<any>, expectedKeys []string) {
			keys := list<string>.Of(value.Keys)
			expectToBe(keys.Count, expectedKeys.Length)
			for key in expectedKeys {
				if not key in keys {
					fail(`Missing key ${key}`)
				}
			}
		}

		describe('.Keys', function() {
			it('should return the keys of a mapping', function(done function<void>()) {
				expectKeys({}, []string{})
				expectKeys([]{any}{'foo': 'bar'}, ['foo'])
				expectKeys([]{any}{'foo': 'bar', 'num': 42}, ['foo', 'num'])
				expectKeys([]{any}{'foo': 'bar', 'num': 42, 'baz': false}, ['baz', 'foo', 'num'])
				done()
			})
		})

		describe('.Clone', function() {
			it('should clone the contents of the mapping', function(done function<void>()) {
				expectKeys(({}).Clone(), []string{})
				expectKeys(([]{any}{'foo': 'bar'}).Clone(), ['foo'])
				expectKeys(([]{any}{'foo': 'bar', 'num': 42}).Clone(), ['foo', 'num'])
				done()
			})
		})

		describe('.WithEntry', function() {
			it('should clone the contents of the mapping and add/replace the specified entry', function(done function<void>()) {
				expectKeys(({}).WithEntry('foo', 'bar'), ['foo'])
				expectKeys(([]{any}{'foo': 'bar'}).WithEntry('foo', 42), ['foo'])
				expectKeys(([]{any}{'foo': 'bar', 'num': 42}).WithEntry('baz', 'hey'), [
					'foo',
					'num',
					'baz',
				])
				done()
			})
		})
	})

	// Slice
	describe('Slice', function() {
		describe('.Empty()', function() {
			it('should create an empty slice', function(done function<void>()) {
				expectToBe(Slice<string>.Empty().IsEmpty, true)
				done()
			})
		})

		describe('.From()', function() {
			it('should create a slice from the contents of a stream', function(done function<void>()) {
				slice := Slice<int>.From([1, 2, 3].Stream())
				expectToBe(slice[0], 1)
				expectToBe(slice[1], 2)
				expectToBe(slice[2], 3)
				done()
			})
		})

		describe('Contains operator', function() {
			it('should return whether the slice contains an element', function(done function<void>()) {
				expectToBe(0 in [], false)
				expectToBe(0 in [0], true)
				expectToBe(0 in [1, 2, 0], true)
				expectToBe(1 in [1, 2, 0], true)
				expectToBe(2 in [1, 2, 0], true)
				expectToBe(3 in [1, 2, 0], false)
				done()
			})
		})

		describe('Index operator', function() {
			it('should return the element at the index', function(done function<void>()) {
				expectToBe([1, 2, 3][0], 1)
				expectToBe([1, 2, 3][1], 2)
				expectToBe([1, 2, 3][2], 3)
				done()
			})

			it('should return the element at the adjusted index', function(done function<void>()) {
				expectToBe([1, 2, 3][-1], 3)
				expectToBe([1, 2, 3][-2], 2)
				expectToBe([1, 2, 3][-3], 1)
				done()
			})

			it('should fail for an invalid index', function(done function<void>()) {
				_, err := [1, 2, 3][4]
				expectToBe(err is not null, true)
				done()
			})
		})

		describe('.Length', function() {
			it('should the length of the slice', function(done function<void>()) {
				expectToBe([].Length, 0)
				expectToBe([1].Length, 1)
				expectToBe([1, 4, 8, 10].Length, 4)
				done()
			})
		})

		describe('.IsEmpty', function() {
			it('should whether the slice is empty', function(done function<void>()) {
				expectToBe([].IsEmpty, true)
				expectToBe([1].IsEmpty, false)
				done()
			})
		})

		describe('Bool operator', function() {
			it('should whether the slice is empty', function(done function<void>()) {
				expectToBe(not [], true)
				expectToBe(not [1], false)
				done()
			})
		})
	})

	// List
	describe('List', function() {
		describe('.Empty()', function() {
			it('should create an empty list', function(done function<void>()) {
				expectToBe(List<string>.Empty().IsEmpty, true)
				done()
			})
		})

		describe('.IsEmpty', function() {
			it('should return empty for an empty list', function(done function<void>()) {
				expectToBe(List<string>.Empty().IsEmpty, true)
				done()
			})

			it('should return non-empty for a non-empty list', function(done function<void>()) {
				expectToBe(List<int>.Of([1, 2, 3].Stream()).IsEmpty, false)
				done()
			})
		})

		describe('.Count', function() {
			it('should return the number of elements in a list', function(done function<void>()) {
				expectToBe(List<string>.Empty().Count, 0)
				expectToBe(List<int>.Of([1, 2, 3].Stream()).Count, 3)
				done()
			})
		})

		describe('.Of', function() {
			it('should return a list of the values in a stream', function(done function<void>()) {
				l := List<int>.Of([1, 2, 3].Stream())
				expectToBe(l.IsEmpty, false)
				expectToBe(1 in l, true)
				expectToBe(2 in l, true)
				expectToBe(3 in l, true)
				done()
			})
		})

		describe('.CopyOf', function() {
			it('should return a copy of the list', function(done function<void>()) {
				l := List<int>.Of([1, 2, 3].Stream())
				copy := List<int>.CopyOf(l)
				copy.Add(4)

				expectToBe(l.IsEmpty, false)
				expectToBe(1 in l, true)
				expectToBe(2 in l, true)
				expectToBe(3 in l, true)
				expectToBe(4 in l, false)

				expectToBe(copy.IsEmpty, false)
				expectToBe(1 in copy, true)
				expectToBe(2 in copy, true)
				expectToBe(3 in copy, true)
				expectToBe(4 in copy, true)
				done()
			})
		})

		describe('.Concat', function() {
			it('should return list that contains the contents of both lists', function(done function<void>()) {
				l1 := List<int>.Of([1, 2, 3].Stream())
				l2 := List<int>.Of([4, 5, 6].Stream())
				concat := List<int>.Concat(l1, l2)

				expectToBe(concat[0], 1)
				expectToBe(concat[1], 2)
				expectToBe(concat[2], 3)

				expectToBe(concat[3], 4)
				expectToBe(concat[4], 5)
				expectToBe(concat[5], 6)
				done()
			})
		})

		describe('Index operator', function() {
			it('should return the element at the index', function(done function<void>()) {
				l := List<int>.Of([1, 2, 3].Stream())

				expectToBe(l[0], 1)
				expectToBe(l[1], 2)
				expectToBe(l[2], 3)
				done()
			})

			it('should return the element at the adjusted index', function(done function<void>()) {
				l := List<int>.Of([1, 2, 3].Stream())

				expectToBe(l[-1], 3)
				expectToBe(l[-2], 2)
				expectToBe(l[-3], 1)
				done()
			})

			it('should fail for an invalid index', function(done function<void>()) {
				l := List<int>.Of([1, 2, 3].Stream())
				_, err := l[4]
				expectToBe(err is not null, true)
				done()
			})
		})

		describe('SetIndex operator', function() {
			it('should set the element at the index', function(done function<void>()) {
				l := List<int>.Of([1, 2, 3].Stream())

				l[0] = 42
				expectToBe(l[0], 42)
				expectToBe(l[1], 2)
				expectToBe(l[2], 3)
				done()
			})

			it('should set the element at the adjusted index', function(done function<void>()) {
				l := List<int>.Of([1, 2, 3].Stream())
				l[-1] = 42

				expectToBe(l[-1], 42)
				expectToBe(l[-2], 2)
				expectToBe(l[-3], 1)
				done()
			})
		})

		describe('Slice operator', function() {
			expectSlice := function(sliced []int, expected []int) {
				expectToBe(sliced.Length, expected.Length)
				for index in 0 ..< expected.Length {
					expectToBe(sliced[index], expected[index])
				}
			}

			it('should return a slice of a list', function(done function<void>()) {
				l := List<int>.Of([1, 2, 3].Stream())
				expectSlice(l[0:1], [1])
				expectSlice(l[1:2], [2])
				expectSlice(l[0:2], [1, 2])
				done()
			})

			it('should return a slice of a list with no defined start index', function(done function<void>()) {
				l := List<int>.Of([1, 2, 3].Stream())
				expectSlice(l[:1], [1])
				expectSlice(l[:2], [1, 2])
				expectSlice(l[:3], [1, 2, 3])
				done()
			})

			it('should return a slice of a list with no defined end index', function(done function<void>()) {
				l := List<int>.Of([1, 2, 3].Stream())
				expectSlice(l[1:], [2, 3])
				expectSlice(l[2:], [3])
				expectSlice(l[3:], []int{})
				done()
			})
		})

		describe('.Stream', function() {
			it('should return a stream of the elements in the list', function(done function<void>()) {
				l := List<int>.Of([1, 2, 3].Stream())
				another := List<int>.Of(l.Stream())
				expectToBe(another.Count, 3)
				expectToBe(another[0], 1)
				expectToBe(another[1], 2)
				expectToBe(another[2], 3)
				done()
			})
		})

		describe('.Add and .Remove', function() {
			it('should add and remove elements from a list', function(done function<void>()) {
				l := List<int>.Of([1, 2, 3].Stream())
				expectToBe(l[0], 1)
				expectToBe(l[1], 2)
				expectToBe(l[2], 3)

				l.Add(4)
				expectToBe(l[0], 1)
				expectToBe(l[1], 2)
				expectToBe(l[2], 3)
				expectToBe(l[3], 4)

				l.Remove(2)
				expectToBe(l[0], 1)
				expectToBe(l[1], 3)
				expectToBe(l[2], 4)

				l.Remove(42)
				expectToBe(l[0], 1)
				expectToBe(l[1], 3)
				expectToBe(l[2], 4)

				l.Remove(1)
				expectToBe(l[0], 3)
				expectToBe(l[1], 4)

				done()
			})
		})

		describe('.IndexOf', function() {
			it('should return the index of an element in the list', function(done function<void>()) {
				l := List<int>.Of([1, 2, 3].Stream())
				expectToBe(l.IndexOf(1), 0)
				expectToBe(l.IndexOf(2), 1)
				expectToBe(l.IndexOf(3), 2)
				done()
			})

			it('should null for an element not in the list', function(done function<void>()) {
				l := List<int>.Of([1, 2, 3].Stream())
				expectToBe(l.IndexOf(4), null)
				done()
			})

			it('should respect the optional starting index', function(done function<void>()) {
				l := List<int>.Of([1, 2, 3, 1].Stream())
				expectToBe(l.IndexOf(1, 2), 3)
				expectToBe(l.IndexOf(2, 2), null)
				done()
			})

			it('should respect the addition and removal of items', function(done function<void>()) {
				l := List<int>.Of([1, 2, 3].Stream())
				expectToBe(l.IndexOf(1), 0)
				expectToBe(l.IndexOf(2), 1)
				expectToBe(l.IndexOf(3), 2)

				l.Add(4)
				expectToBe(l.IndexOf(4), 3)

				l.Remove(4)
				expectToBe(l.IndexOf(4), null)

				l.Remove(1)
				expectToBe(l.IndexOf(1), null)

				expectToBe(l.IndexOf(2), 0)
				expectToBe(l.IndexOf(3), 1)

				done()
			})
		})

		describe('Bool operator', function() {
			it('should whether the list is empty', function(done function<void>()) {
				expectToBe(not List<int>.Empty(), true)
				expectToBe(not List<int>.Of([1].Stream()), false)
				done()
			})
		})
	})

	// Set
	describe('Set', function() {
		describe('.Empty()', function() {
			it('should create an empty set', function(done function<void>()) {
				expectToBe(Set<string>.Empty().IsEmpty, true)
				done()
			})
		})

		describe('.IsEmpty', function() {
			it('should return empty for an empty set', function(done function<void>()) {
				expectToBe(Set<string>.Empty().IsEmpty, true)
				done()
			})

			it('should return non-empty for a non-empty set', function(done function<void>()) {
				expectToBe(Set<int>.From([1]).IsEmpty, false)
				done()
			})
		})

		describe('.From', function() {
			it('should return set containing the elements of the given streamable', function(done function<void>()) {
				s := Set<int>.From([1, 2, 3])
				expectToBe(1 in s, true)
				expectToBe(2 in s, true)
				expectToBe(3 in s, true)
				done()
			})
		})

		describe('.Contains and Contains operator', function() {
			it('should return whether the set contains an element', function(done function<void>()) {
				s := Set<int>.From([1, 2, 3])
				expectToBe(1 in s, true)
				expectToBe(2 in s, true)
				expectToBe(3 in s, true)

				expectToBe(s.Contains(1), true)
				expectToBe(s.Contains(2), true)
				expectToBe(s.Contains(3), true)

				expectToBe(4 in s, false)
				expectToBe(s.Contains(4), false)
				done()
			})
		})

		describe('.Stream', function() {
			it('should a stream of all the elements in the Set', function(done function<void>()) {
				s := Set<int>.From(Set<int>.From([1, 2, 3]))
				expectToBe(1 in s, true)
				expectToBe(2 in s, true)
				expectToBe(3 in s, true)
				done()
			})
		})

		describe('.Add and .Remove', function() {
			it('should add an element to a set once', function(done function<void>()) {
				s := Set<int>.Empty()
				expectToBe(42 in s, false)

				s.Add(42)
				expectToBe(42 in s, true)

				s.Add(42)
				expectToBe(42 in s, true)

				s.Remove(42)
				expectToBe(42 in s, false)
				done()
			})
		})

		describe('Bool operator', function() {
			it('should whether the set is empty', function(done function<void>()) {
				expectToBe(not Set<int>.Empty(), true)
				expectToBe(not Set<int>.From([1]), false)
				done()
			})
		})
	})

	// Map
	describe('Map', function() {
		describe('.Empty()', function() {
			it('should create an empty map', function(done function<void>()) {
				expectToBe(Map<string, int>.Empty().IsEmpty, true)
				done()
			})
		})

		describe('.IsEmpty', function() {
			it('should return empty for an empty map', function(done function<void>()) {
				expectToBe(Map<string, int>.Empty().IsEmpty, true)
				done()
			})

			it('should return non-empty for a non-empty map', function(done function<void>()) {
				m := Map<string, int>.Empty()
				m['hello'] = 2

				expectToBe(m.IsEmpty, false)
				done()
			})
		})

		describe('.Mapping', function() {
			it('should a cloned mapping of the Map', function(done function<void>()) {
				m := Map<string, int>.Empty()
				m['hello'] = 2

				mapping := m.Mapping()

				expectToBe(mapping['hello'], 2)
				done()
			})
		})

		describe('.Keys', function() {
			it('should a stream of all the keys in the Map', function(done function<void>()) {
				m := Map<string, int>.Empty()
				m['hello'] = 2
				m['world'] = 3

				keys := Set<string>.Of(m.Keys)
				expectToBe('hello' in keys, true)
				expectToBe('world' in keys, true)
				done()
			})
		})

		describe('.RemoveKey', function() {
			it('should remove a key and its value from the map', function(done function<void>()) {
				m := Map<string, int>.Empty()
				m['hello'] = 2
				m['world'] = 3

				m.RemoveKey('hello')

				keys := Set<string>.Of(m.Keys)
				expectToBe('hello' in keys, false)
				expectToBe('world' in keys, true)
				done()
			})

			it('should no-op for a key not in the map', function(done function<void>()) {
				m := Map<string, int>.Empty()
				m['hello'] = 2
				m['world'] = 3

				m.RemoveKey('hi')
				done()
			})
		})

		describe('operator Index', function() {
			it('should retrieve the value for the key in the map', function(done function<void>()) {
				m := Map<string, int>.Empty()
				m['hello'] = 2
				m['world'] = 3

				expectToBe(m['hello'], 2)
				expectToBe(m['world'], 3)
				done()
			})

			it('should return null for a key not in the map', function(done function<void>()) {
				m := Map<string, int>.Empty()
				m['hello'] = 2
				m['world'] = 3

				expectToBe(m['hi'], null)
				done()
			})
		})

		describe('operator SetIndex', function() {
			it('should set the given key to the given value in the map', function(done function<void>()) {
				m := Map<string, int>.Empty()
				m['hello'] = 2
				m['world'] = 3

				expectToBe(m['hello'], 2)
				expectToBe(m['world'], 3)

				m['hello'] = 42
				expectToBe(m['hello'], 42)

				m['world'] = 43
				expectToBe(m['world'], 43)

				m['hi'] = 44
				expectToBe(m['hi'], 44)

				done()
			})
		})

		describe('operator Contains', function() {
			it('should return whether a key is in a Map', function(done function<void>()) {
				m := Map<string, int>.Empty()
				m['hello'] = 2
				m['world'] = 3

				expectToBe('hello' in m, true)
				expectToBe('world' in m, true)
				expectToBe('hi' in m, false)

				m['hello'] = 42
				m['hi'] = 44

				expectToBe('hello' in m, true)
				expectToBe('world' in m, true)
				expectToBe('hi' in m, true)
				done()
			})
		})

		describe('Bool operator', function() {
			it('should whether the Map is empty', function(done function<void>()) {
				expectToBe(not Map<string, int>.Empty(), true)

				m := Map<string, int>.Empty()
				m['hello'] = 2
				m['world'] = 3
				expectToBe(not m, false)
				done()
			})
		})
	})
}
